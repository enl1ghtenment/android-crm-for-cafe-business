package com.ostapenko.crm.ui;

import android.net.Uri;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.google.android.material.appbar.MaterialToolbar;
import com.ostapenko.crm.R;
import com.ostapenko.crm.auth.Session;
import com.ostapenko.crm.db.AppDatabase;
import com.ostapenko.crm.db.dao.SaleDao;
import com.ostapenko.crm.dto.SaleRow;

import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class SalesActivity extends AppCompatActivity {

    private SalesAdapter adapter;
    private SaleDao saleDao;
    private final ExecutorService io = Executors.newSingleThreadExecutor();
    private TextView tvSummary;
    private Date lastFrom, lastTo;
    private boolean isAdmin;

    // üëâ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª –∏–∑ –º–µ–Ω—é
    private @Nullable Uri lastExportUri = null;

    private ActivityResultLauncher<String> createCsvLauncher;

    @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sales);

        // –¢—É–ª–±–∞—Ä –∫–∞–∫ ActionBar
        MaterialToolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        // –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        isAdmin = "admin".equalsIgnoreCase(new Session(this).role());

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ª–∞—É–Ω—á–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        createCsvLauncher = registerForActivityResult(
                new ActivityResultContracts.CreateDocument("text/csv"),
                this::onCsvUriChosen
        );

        EditText etSearch = findViewById(R.id.etSearchSales);
        etSearch.addTextChangedListener(new android.text.TextWatcher() {
            @Override public void onTextChanged(CharSequence s, int start, int before, int count) {
                adapter.filter(s.toString());
            }
            @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
            @Override public void afterTextChanged(android.text.Editable s) {}
        });

        saleDao = AppDatabase.getInstance(getApplicationContext()).saleDao();

        tvSummary = findViewById(R.id.tvSummary);

        androidx.recyclerview.widget.RecyclerView rv = findViewById(R.id.rvSales);
        rv.setLayoutManager(new LinearLayoutManager(this));
        adapter = new SalesAdapter();
        rv.setAdapter(adapter);

        Button btnDay = findViewById(R.id.btnDay);
        Button btnWeek = findViewById(R.id.btnWeek);
        Button btnMonth = findViewById(R.id.btnMonth);

        btnDay.setOnClickListener(v -> loadDay());
        btnWeek.setOnClickListener(v -> loadWeek());
        btnMonth.setOnClickListener(v -> loadMonth());

        loadDay(); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –ú–µ–Ω—é —Ç—É–ª–±–∞—Ä–∞ (—ç–∫—Å–ø–æ—Ä—Ç/–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_sales, menu);
        menu.findItem(R.id.action_export).setVisible(isAdmin);
        menu.findItem(R.id.action_share_csv).setVisible(isAdmin);
        return true;
    }

    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        menu.findItem(R.id.action_export).setVisible(isAdmin);
        menu.findItem(R.id.action_share_csv).setVisible(isAdmin);
        return super.onPrepareOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.action_export) {
            startExport();
            return true;
        } else if (id == R.id.action_share_csv) {
            if (lastExportUri != null) {
                shareCsv(lastExportUri);
            } else {
                Toast.makeText(this, "–°–Ω–∞—á–∞–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π CSV —á–µ—Ä–µ–∑ ¬´–≠–∫—Å–ø–æ—Ä—Ç¬ª", Toast.LENGTH_SHORT).show();
            }
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    private void loadDay() {
        Date now = new Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(now);
        cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0); cal.set(Calendar.MILLISECOND, 0);
        Date from = cal.getTime();

        cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59); cal.set(Calendar.MILLISECOND, 999);
        Date to = cal.getTime();

        loadRange(from, to);
    }

    private void loadWeek() {
        Calendar cal = Calendar.getInstance();
        Date to = cal.getTime();
        cal.add(Calendar.DATE, -7);
        Date from = cal.getTime();
        loadRange(from, to);
    }

    private void loadMonth() {
        Calendar cal = Calendar.getInstance();
        Date to = cal.getTime();
        cal.add(Calendar.MONTH, -1);
        Date from = cal.getTime();
        loadRange(from, to);
    }

    private void loadRange(Date from, Date to) {
        lastFrom = from;
        lastTo   = to;
        io.execute(() -> {
            try {
                List<SaleRow> rows = saleDao.findRowsBetween(from, to);
                double total = saleDao.sumBetween(from, to);
                runOnUiThread(() -> {
                    adapter.submit(rows);
                    tvSummary.setText("–ò—Ç–æ–≥: ‚Ç¥" + total);
                });
            } catch (Exception e) {
                runOnUiThread(() -> Toast.makeText(this, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: " + e.getMessage(), Toast.LENGTH_LONG).show());
            }
        });
    }

    // ==== –≠–∫—Å–ø–æ—Ä—Ç CSV ====

    private void startExport() {
        if (lastFrom == null || lastTo == null) {
            Toast.makeText(this, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ (–î–µ–Ω—å/–ù–µ–¥–µ–ª—è/–ú–µ—Å—è—Ü)", Toast.LENGTH_SHORT).show();
            return;
        }
        String fname = "sales_" + new SimpleDateFormat("yyyyMMdd_HHmm", Locale.getDefault()).format(new Date()) + ".csv";
        createCsvLauncher.launch(fname);
    }

    private void onCsvUriChosen(@Nullable Uri uri) {
        if (uri == null) return;
        io.execute(() -> {
            try (OutputStream os = getContentResolver().openOutputStream(uri, "w")) {
                if (os == null) throw new IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏");

                // UTF-8 BOM ‚Äî —á—Ç–æ–±—ã Excel –ø–æ–¥ Windows –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫—Ä—ã–ª –∫–∏—Ä–∏–ª–ª–∏—Ü—É
                os.write(new byte[]{(byte)0xEF, (byte)0xBB, (byte)0xBF});

                List<SaleRow> rows = saleDao.findRowsBetween(lastFrom, lastTo);
                double total = saleDao.sumBetween(lastFrom, lastTo);

                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                String[] header = {
                        "–î–∞—Ç–∞/–≤—Ä–µ–º—è", "–ß–µ–∫ ID", "–¢–æ–≤–∞—Ä", "–ö–æ–ª-–≤–æ",
                        "–°—É–º–º–∞ —Å—Ç—Ä–æ–∫–∏", "–ü—Ä–æ–¥–∞–≤–µ—Ü", "–õ–æ–≥–∏–Ω", "–ß–µ–∫ –∏—Ç–æ–≥–æ"
                };
                writeCsvLine(os, header);

                SimpleDateFormat df = new SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault());

                for (SaleRow r : rows) {
                    String seller =
                            (r.firstName != null && !r.firstName.isEmpty())
                                    ? r.firstName + (r.lastName == null ? "" : " " + r.lastName)
                                    : (r.login != null ? r.login : (r.sellerId == null ? "-" : String.valueOf(r.sellerId)));
                    String[] line = {
                            df.format(r.saleDate),
                            String.valueOf(r.saleId),
                            nullToEmpty(r.productName),
                            String.valueOf(r.quantity),
                            trim(r.subtotal),
                            seller,
                            nullToEmpty(r.login),
                            trim(r.saleTotal)
                    };
                    writeCsvLine(os, line);
                }

                // –ò—Ç–æ–≥ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ + —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–∏–æ–¥–∞)
                writeRaw(os, "\n");
                writeCsvLine(os, new String[]{"", "", "", "", "–ò—Ç–æ–≥ –ø–µ—Ä–∏–æ–¥–∞", "", "", trim(total)});

                lastExportUri = uri; // üëà –∑–∞–ø–æ–º–Ω–∏–ª–∏ –¥–ª—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª
                runOnUiThread(() -> {
                    Toast.makeText(this, "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω CSV-—Ñ–∞–π–ª", Toast.LENGTH_LONG).show();
                    // –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
                    shareCsv(uri);
                });
            } catch (Exception e) {
                runOnUiThread(() -> Toast.makeText(this, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: " + e.getMessage(), Toast.LENGTH_LONG).show());
            }
        });
    }

    // ==== –ü–æ–¥–µ–ª–∏—Ç—å—Å—è CSV —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—ç—Ä–∏–Ω–≥ ====

    private void shareCsv(@NonNull Uri uri) {
        try {
            android.content.Intent send = new android.content.Intent(android.content.Intent.ACTION_SEND);
            send.setType("text/csv");
            send.putExtra(android.content.Intent.EXTRA_STREAM, uri);
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É/—Å–æ–æ–±—â–µ–Ω–∏–µ
            send.putExtra(android.content.Intent.EXTRA_SUBJECT, "–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–∂");
            send.putExtra(android.content.Intent.EXTRA_TEXT, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –≤ CSV –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.");

            // –û—á–µ–Ω—å –≤–∞–∂–Ω–æ: –¥–∞—ë–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
            send.addFlags(android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION);

            startActivity(android.content.Intent.createChooser(send, "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è CSV"));
        } catch (Exception e) {
            Toast.makeText(this, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è: " + e.getMessage(), Toast.LENGTH_LONG).show();
        }
    }

    private void writeCsvLine(OutputStream os, String[] cells) throws Exception {
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî ';' (–≤ —Ä—è–¥–µ –ª–æ–∫–∞–ª–µ–π Excel –æ–∂–∏–¥–∞–µ—Ç –∏–º–µ–Ω–Ω–æ –µ–≥–æ)
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < cells.length; i++) {
            if (i > 0) sb.append(';');
            sb.append(csvEscape(cells[i]));
        }
        sb.append('\n');
        writeRaw(os, sb.toString());
    }

    private void writeRaw(OutputStream os, String s) throws Exception {
        os.write(s.getBytes(StandardCharsets.UTF_8));
    }

    private String csvEscape(String s) {
        if (s == null) s = "";
        String v = s.replace("\"", "\"\"");
        return "\"" + v + "\"";
    }

    private static String trim(double d) {
        String s = String.valueOf(d);
        if (s.endsWith(".0")) return s.substring(0, s.length()-2);
        return s;
    }

    private static String nullToEmpty(String s) { return s == null ? "" : s; }
}
